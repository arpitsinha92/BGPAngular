{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/add/operator/switchMap.js","webpack:///./node_modules/rxjs-compat/_esm5/operator/switchMap.js","webpack:///./src/app/views/app-chats/app-chats.component.css","webpack:///./src/app/views/app-chats/app-chats.component.html","webpack:///./src/app/views/app-chats/app-chats.component.ts","webpack:///./src/app/views/app-chats/app-chats.module.ts","webpack:///./src/app/views/app-chats/app-chats.routing.ts","webpack:///./src/app/views/app-chats/chat-contents/chat-contents.component.html","webpack:///./src/app/views/app-chats/chat-contents/chat-contents.component.scss","webpack:///./src/app/views/app-chats/chat-contents/chat-contents.component.ts","webpack:///./src/app/views/app-chats/chat-left-sidenav/chat-left-sidenav.component.html","webpack:///./src/app/views/app-chats/chat-left-sidenav/chat-left-sidenav.component.scss","webpack:///./src/app/views/app-chats/chat-left-sidenav/chat-left-sidenav.component.ts","webpack:///./src/app/views/app-chats/chat.service.ts"],"names":[],"mappings":"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","file":"views-app-chats-app-chats-module.js","sourcesContent":["import { Observable } from 'rxjs';\nimport { switchMap } from '../../operator/switchMap';\nObservable.prototype.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","import { switchMap as higherOrderSwitchMap } from 'rxjs/operators';\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project) {\n    return higherOrderSwitchMap(project)(this);\n}\n//# sourceMappingURL=switchMap.js.map","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2FwcC1jaGF0cy9hcHAtY2hhdHMuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-card class=\\\"p-0\\\">\\r\\n  <mat-sidenav-container class=\\\"chat-container\\\">\\r\\n    <!-- Left sidebar -->\\r\\n    <mat-sidenav class=\\\"chat-sidenav\\\" [opened]=\\\"isSidenavOpen\\\" mode=\\\"side\\\">\\r\\n      <app-chat-left-sidenav></app-chat-left-sidenav>\\r\\n    </mat-sidenav>\\r\\n\\r\\n    <!-- Right side -->\\r\\n    <div class=\\\"chats-wrap\\\">\\r\\n      <!-- Right side topbar -->\\r\\n      <app-chat-contents [matSidenav]=\\\"sideNav\\\"></app-chat-contents>\\r\\n\\r\\n    </div>\\r\\n  </mat-sidenav-container>\\r\\n</mat-card>\\r\\n\"","import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { MediaChange, ObservableMedia } from '@angular/flex-layout';\r\nimport { MatSidenav, MatDialog } from '@angular/material';\r\nimport { ChatService } from './chat.service';\r\n\r\n@Component({\r\n  selector: 'app-chats',\r\n  templateUrl: './app-chats.component.html',\r\n  styleUrls: ['./app-chats.component.css']\r\n})\r\nexport class AppChatsComponent implements OnInit, OnDestroy {\r\n  isMobile;\r\n  screenSizeWatcher: Subscription;\r\n  isSidenavOpen: Boolean = true;\r\n  @ViewChild(MatSidenav) public sideNav: MatSidenav;\r\n\r\n  activeChatUser = {\r\n    name: 'Gevorg Spartak',\r\n    photo: 'assets/images/face-2.jpg',\r\n    isOnline: true,\r\n    lastMsg: 'Hello!'\r\n  };\r\n  user;\r\n\r\n\r\n  constructor(\r\n    private media: ObservableMedia, \r\n    public chatService: ChatService\r\n  ) {\r\n    console.log(chatService.chats)\r\n    this.user = chatService.user\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.chatSideBarInit();\r\n  }\r\n  ngOnDestroy() {\r\n    if (this.screenSizeWatcher) {\r\n      this.screenSizeWatcher.unsubscribe();\r\n    }\r\n  }\r\n  changeActiveUser(user) {\r\n    this.activeChatUser = user;\r\n  }\r\n  updateSidenav() {\r\n    var self = this;\r\n    setTimeout(() => {\r\n      self.isSidenavOpen = !self.isMobile;\r\n      self.sideNav.mode = self.isMobile ? 'over' : 'side';\r\n    });\r\n  }\r\n  chatSideBarInit() {\r\n    this.isMobile = this.media.isActive('xs') || this.media.isActive('sm');\r\n    this.updateSidenav();\r\n    this.screenSizeWatcher = this.media.subscribe((change: MediaChange) => {\r\n      this.isMobile = (change.mqAlias === 'xs') || (change.mqAlias === 'sm');\r\n      this.updateSidenav();\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport {\r\n  MatIconModule,\r\n  MatButtonModule,\r\n  MatSidenavModule,\r\n  MatMenuModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatToolbarModule,\r\n  MatCardModule\r\n } from '@angular/material';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { SharedModule } from '../../shared/shared.module'\r\nimport { AppChatsComponent } from './app-chats.component';\r\nimport { ChatsRoutes } from './app-chats.routing';\r\nimport { ChatLeftSidenavComponent } from './chat-left-sidenav/chat-left-sidenav.component';\r\nimport { ChatContentsComponent } from './chat-contents/chat-contents.component';\r\nimport { ChatService } from './chat.service';\r\nimport { PerfectScrollbarModule } from 'ngx-perfect-scrollbar';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    SharedModule,\r\n    MatSidenavModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatListModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    FlexLayoutModule,\r\n    PerfectScrollbarModule,\r\n    RouterModule.forChild(ChatsRoutes)\r\n  ],\r\n  declarations: [AppChatsComponent, ChatLeftSidenavComponent, ChatContentsComponent],\r\n  providers: [ ChatService ]\r\n})\r\nexport class AppChatsModule {}","import { Routes } from '@angular/router';\r\n\r\nimport { AppChatsComponent } from './app-chats.component';\r\n\r\nexport const ChatsRoutes: Routes = [\r\n  { path: '', component: AppChatsComponent, data: { title: 'Chat' } }\r\n];\r\n","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"chat-toolbar\\\">\\r\\n    <!-- sidebar toggle button -->\\r\\n    <button \\r\\n    mat-icon-button\\r\\n    [style.alignSelf]=\\\"'center'\\\"\\r\\n    class=\\\"mr-1\\\" \\r\\n    (click)=\\\"matSidenav.toggle()\\\"><mat-icon>short_text</mat-icon>\\r\\n    </button>\\r\\n    \\r\\n    <!-- Selected active user -->\\r\\n    <div \\r\\n      class=\\\"active-chat-user\\\" \\r\\n      fxLayout=\\\"row\\\" \\r\\n      fxLayoutAlign=\\\"start center\\\"\\r\\n      *ngIf=\\\"activeContact.id\\\"\\r\\n    >\\r\\n      <a \\r\\n        [ngClass]=\\\"{online: activeContact.status === 'online'}\\\" \\r\\n        class=\\\"toolbar-avatar mr-1\\\"\\r\\n      >\\r\\n        <img [src]=\\\"activeContact.avatar\\\" alt=\\\"\\\">\\r\\n        <span class=\\\"status-dot\\\"></span>\\r\\n      </a>\\r\\n      <div fxLayout=\\\"column\\\">\\r\\n        <h6 class=\\\"m-0 font-normal fz-1\\\">{{activeContact.name}}</h6>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Right side top menu -->\\r\\n    <span fxFlex></span>\\r\\n    <button \\r\\n    [style.alignSelf]=\\\"'center'\\\" \\r\\n    mat-icon-button \\r\\n    [matMenuTriggerFor]=\\\"toolbarDDMenu\\\" \\r\\n    class=\\\"topbar-button-right hidden-on-open\\\">\\r\\n        <mat-icon>more_vert</mat-icon>\\r\\n    </button>\\r\\n    <mat-menu #toolbarDDMenu=\\\"matMenu\\\">\\r\\n        <button mat-menu-item><mat-icon>account_circle</mat-icon>Contact info</button>\\r\\n        <button mat-menu-item><mat-icon>volume_mute</mat-icon>Mute</button>\\r\\n        <button mat-menu-item><mat-icon>delete</mat-icon>Clear chat</button>\\r\\n    </mat-menu>\\r\\n</mat-toolbar>\\r\\n\\r\\n<div *ngIf=\\\"chatCollection\\\">\\r\\n    <!-- Main chat body -->\\r\\n    <div class=\\\"conversations-hold\\\" [perfectScrollbar]>\\r\\n\\r\\n      <!-- single chat item -->\\r\\n      <div class=\\\"single-conversation\\\" \\r\\n        fxLayout=\\\"row\\\" \\r\\n        *ngFor=\\\"let chat of chatCollection?.chats\\\"\\r\\n        [ngClass]=\\\"{sender: chat.contactId === activeContact.id, me: chat.contactId !== activeContact.id}\\\"\\r\\n      >\\r\\n\\r\\n        <a \\r\\n          *ngIf=\\\"chat.contactId !== activeContact.id\\\" \\r\\n          href=\\\"\\\" \\r\\n          class=\\\"toolbar-avatar\\\"\\r\\n          [ngClass]=\\\"{online: user.status === 'online'}\\\"\\r\\n        >\\r\\n          <img [src]=\\\"user?.avatar\\\" [alt]=\\\"user?.name\\\">\\r\\n          <span class=\\\"status-dot\\\"></span>\\r\\n        </a>\\r\\n\\r\\n        <a \\r\\n          *ngIf=\\\"chat.contactId === activeContact.id\\\" \\r\\n          href=\\\"\\\" \\r\\n          class=\\\"toolbar-avatar\\\"\\r\\n          [ngClass]=\\\"{online: activeContact.status === 'online'}\\\"\\r\\n        >\\r\\n          <img [src]=\\\"activeContact?.avatar\\\" [alt]=\\\"activeContact?.name\\\">\\r\\n          <span class=\\\"status-dot\\\"></span>\\r\\n        </a>\\r\\n\\r\\n        <div>\\r\\n          <h5 *ngIf=\\\"chat.contactId === activeContact.id\\\" class=\\\"chat-username text-muted\\\">{{activeContact?.name}}</h5>\\r\\n          <h5 *ngIf=\\\"chat.contactId !== activeContact.id\\\" class=\\\"chat-username text-muted\\\">{{user?.name}}</h5>\\r\\n\\r\\n          <div class=\\\"conversation-msg\\\">\\r\\n            {{chat.text}}\\r\\n          </div>\\r\\n          <p class=\\\"chat-date text-muted\\\">{{chat.time | relativeTime}}</p>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n    <mat-divider></mat-divider>\\r\\n\\r\\n    <!-- Input box and send button -->\\r\\n    <div class=\\\"chat-input-actions\\\">\\r\\n      <form \\r\\n        #msgForm=\\\"ngForm\\\" \\r\\n        class=\\\"inputForm\\\" \\r\\n        (ngSubmit)=\\\"sendMessage($event)\\\" \\r\\n        (keyup.enter)=\\\"sendMessage($event)\\\"\\r\\n        fxLayout=\\\"row\\\"\\r\\n      >\\r\\n        <mat-form-field class=\\\"full-width mr-1\\\">\\r\\n          <textarea\\r\\n          matInput\\r\\n          #msgInput\\r\\n          ngModel\\r\\n          placeholder=\\\"Type your message\\\"\\r\\n          name=\\\"message\\\"\\r\\n          class=\\\"inputText\\\"\\r\\n          value=\\\"\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <button mat-fab color=\\\"primary\\\" type=\\\"submit\\\"><mat-icon>send</mat-icon></button>\\r\\n      </form>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div class=\\\"chat-intro\\\" *ngIf=\\\"!chatCollection\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\r\\n  <h6>Select a contact and start chat</h6>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2FwcC1jaGF0cy9jaGF0LWNvbnRlbnRzL2NoYXQtY29udGVudHMuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, ViewChild, ViewChildren, Input, OnDestroy } from \"@angular/core\";\r\nimport { PerfectScrollbarDirective } from \"ngx-perfect-scrollbar\";\r\nimport { ChatService, ChatCollection, User, Chat } from \"../chat.service\";\r\nimport { NgForm } from \"@angular/forms\";\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: \"app-chat-contents\",\r\n  templateUrl: \"./chat-contents.component.html\",\r\n  styleUrls: [\"./chat-contents.component.scss\"]\r\n})\r\nexport class ChatContentsComponent implements OnInit, OnDestroy {\r\n  user: User = new User();\r\n  activeContact: User = new User();\r\n  public chatCollection: ChatCollection;\r\n\r\n  userUpdateSub: Subscription;\r\n  chatUpdateSub: Subscription;\r\n  chatSelectSub: Subscription;\r\n\r\n  @Input('matSidenav') matSidenav;\r\n  @ViewChild(PerfectScrollbarDirective) psContainer: PerfectScrollbarDirective;\r\n\r\n  @ViewChildren(\"msgInput\") msgInput;\r\n  @ViewChild(\"msgForm\") msgForm: NgForm;\r\n\r\n  constructor(private chatService: ChatService) {}\r\n\r\n  ngOnInit() {\r\n    // Listen for user update\r\n    this.userUpdateSub = this.chatService.onUserUpdated.subscribe(user => {\r\n      this.user = user;\r\n    });\r\n\r\n    // Listen for contact change\r\n    this.chatSelectSub = this.chatService.onChatSelected.subscribe(res => {\r\n      if (res) {\r\n        this.chatCollection = res.chatCollection;\r\n        this.activeContact = res.contact;\r\n        this.initMsgForm();\r\n      }\r\n    });\r\n\r\n    // Listen for chat update\r\n    this.chatUpdateSub = this.chatService.onChatsUpdated.subscribe(chat => {\r\n      this.chatCollection.chats.push(chat);\r\n      this.scrollToBottom();\r\n    })\r\n  }\r\n  \r\n  ngOnDestroy() {\r\n    if( this.userUpdateSub ) this.userUpdateSub.unsubscribe();\r\n    if( this.chatSelectSub ) this.chatSelectSub.unsubscribe();\r\n    if( this.chatUpdateSub ) this.chatUpdateSub.unsubscribe();\r\n  }\r\n\r\n  sendMessage(e) {\r\n\r\n    const chat: Chat = {\r\n      contactId: this.chatService.user.id,\r\n      text: this.msgForm.form.value.message,\r\n      time: new Date().toISOString()\r\n    };\r\n\r\n    this.chatCollection.chats.push(chat);\r\n    this.chatService\r\n      .updateChats(this.chatCollection.id, [...this.chatCollection.chats])\r\n      .subscribe(res => {\r\n        this.initMsgForm();\r\n      });\r\n    \r\n    // Only for demo purpose\r\n    this.chatService.autoReply({\r\n      contactId: this.activeContact.id,\r\n      text: `Hi, I\\'m ${this.activeContact.name}. Your imaginary friend.`,\r\n      time: new Date().toISOString()\r\n    })\r\n    \r\n  }\r\n\r\n  initMsgForm() {\r\n    setTimeout(() => {\r\n      this.msgForm.reset();\r\n      this.msgInput.first.nativeElement.focus();\r\n      this.scrollToBottom();\r\n    });\r\n  }\r\n\r\n  scrollToBottom() {\r\n    setTimeout(() => {\r\n      this.psContainer.update();\r\n      this.psContainer.scrollToBottom(0, 400);\r\n    })\r\n  }\r\n}\r\n","module.exports = \"<!-- Left side topbar -->\\r\\n<mat-toolbar color=\\\"primary\\\" class=\\\"chat-sidebar-toolbar\\\">\\r\\n  <a href=\\\"\\\" class=\\\"toolbar-avatar online\\\">\\r\\n    <img [src]=\\\"currentUser.avatar\\\" alt=\\\"\\\">\\r\\n    <span class=\\\"status-dot\\\"></span>\\r\\n  </a>\\r\\n  <h6 class=\\\"m-0 pl-1 font-normal fz-1\\\">{{currentUser.name}}</h6>\\r\\n</mat-toolbar>\\r\\n<div [perfectScrollbar] class=\\\"chat-sidebar-scroll\\\">\\r\\n  <!-- Left side contact list -->\\r\\n  <mat-nav-list class=\\\"inbox-nav-list\\\" role=\\\"list\\\">\\r\\n    <mat-list-item\\r\\n    *ngFor=\\\"let info of currentUser?.chatInfo\\\"\\r\\n    (click)=\\\"getChatByContact(info.contactId)\\\">\\r\\n      <a \\r\\n      mat-list-avatar \\r\\n      [ngClass]=\\\"{online: (contacts | getValueByKey:info.contactId:'status') === 'online'}\\\"\\r\\n      class=\\\"toolbar-avatar\\\">\\r\\n        <img [src]=\\\"contacts | getValueByKey:info.contactId:'avatar'\\\" alt=\\\"\\\">\\r\\n        <span class=\\\"status-dot\\\"></span>\\r\\n      </a>\\r\\n      <h6 matLine>{{info.contactName}}</h6>\\r\\n      <p matLine class=\\\"text-muted\\\">{{info.lastChatTime  | date}}</p>\\r\\n    </mat-list-item>\\r\\n    \\r\\n  </mat-nav-list>\\r\\n  <mat-divider></mat-divider>\\r\\n  <mat-nav-list class=\\\"inbox-nav-list\\\" role=\\\"list\\\">\\r\\n    <mat-list-item\\r\\n    *ngFor=\\\"let contact of contacts\\\"\\r\\n    (click)=\\\"getChatByContact(contact.id)\\\">\\r\\n      <a \\r\\n      mat-list-avatar \\r\\n      [ngClass]=\\\"{online: contact.status === 'online'}\\\"\\r\\n      class=\\\"toolbar-avatar\\\">\\r\\n        <img [src]=\\\"contact.avatar\\\" alt=\\\"\\\">\\r\\n        <span class=\\\"status-dot\\\"></span>\\r\\n      </a>\\r\\n      <h6 matLine>{{contact.name}}</h6>\\r\\n      <!-- <p matLine class=\\\"text-muted\\\">{{contact.lastChatTime  | date}}</p> -->\\r\\n    </mat-list-item>\\r\\n    \\r\\n  </mat-nav-list>\\r\\n</div>\\r\\n  \"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2FwcC1jaGF0cy9jaGF0LWxlZnQtc2lkZW5hdi9jaGF0LWxlZnQtc2lkZW5hdi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from \"@angular/core\";\r\nimport { ChatService, User } from \"../chat.service\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-chat-left-sidenav\",\r\n  templateUrl: \"./chat-left-sidenav.component.html\",\r\n  styleUrls: [\"./chat-left-sidenav.component.scss\"]\r\n})\r\nexport class ChatLeftSidenavComponent implements OnInit {\r\n  userUpdateSub: Subscription;\r\n  loadDataSub: Subscription;\r\n  \r\n  isSidenavOpen = true;\r\n\r\n  currentUser: User = new User();\r\n  contacts: any[];\r\n\r\n  constructor(private chatService: ChatService) {}\r\n\r\n  ngOnInit() {\r\n    // this.chatService.onChatsUpdated\r\n    //   .subscribe(updatedChats => {\r\n    //     this.chats = updatedChats;\r\n    //   });\r\n\r\n    this.userUpdateSub = this.chatService.onUserUpdated\r\n      .subscribe(updatedUser => {\r\n        this.currentUser = updatedUser;\r\n      });\r\n\r\n    this.loadDataSub = this.chatService.loadChatData()\r\n      .subscribe(res => {\r\n        this.currentUser = this.chatService.user;\r\n        // this.chats = this.chatService.chats;\r\n        this.contacts = this.chatService.contacts;\r\n      });\r\n  }\r\n  ngOnDestroy() {\r\n    if( this.userUpdateSub ) this.userUpdateSub.unsubscribe();\r\n    if( this.loadDataSub ) this.loadDataSub.unsubscribe();\r\n  }\r\n\r\n  getChatByContact(contactId) { \r\n    this.chatService.getChatByContact(contactId)\r\n      .subscribe(res => {\r\n        // console.log('from sub',res);\r\n      }, err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n  \r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable, BehaviorSubject, Subject, of, combineLatest } from \"rxjs\";\r\nimport { map, switchMap } from \"rxjs/operators\";\r\n\r\nimport 'rxjs/add/operator/switchMap';\r\n\r\nexport interface Chat {\r\n  text: string;\r\n  time: Date | string;\r\n  contactId: User[\"id\"];\r\n}\r\n\r\nexport interface ChatCollection {\r\n  id: string;\r\n  chats: Chat[];\r\n}\r\n\r\nexport interface UserChatInfo {\r\n  chatId: ChatCollection[\"id\"];\r\n  contactId: User[\"id\"];\r\n  contactName: User[\"name\"];\r\n  unread: number;\r\n  lastChatTime: Date | string;\r\n}\r\n\r\nexport class User {\r\n  id: string;\r\n  avatar: string;\r\n  name: string;\r\n  status: string;\r\n  chatInfo?: UserChatInfo[];\r\n}\r\n\r\n@Injectable()\r\nexport class ChatService {\r\n  public contacts: User[];\r\n  public chats: ChatCollection[];\r\n  public user: User;\r\n\r\n  onContactSelected = new BehaviorSubject<any>(null);\r\n  onUserUpdated = new Subject<User>();\r\n\r\n  onChatSelected = new BehaviorSubject<any>(null);\r\n  onChatsUpdated = new Subject<any>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    // console.log('from service');\r\n    // this.loadChatData()\r\n  }\r\n\r\n  loadChatData(): Observable<any> {\r\n    return combineLatest(\r\n      this.getAllContacts(),\r\n      this.getAllChats(),\r\n      this.getCurrentUser(),\r\n      (contacts, chats, user) => {\r\n        this.contacts = contacts;\r\n        this.chats = chats;\r\n        this.user = user;\r\n        console.log('next.willCall')\r\n        this.onUserUpdated.next(user);\r\n        console.log('next.called')\r\n        console.log(\r\n          \"contacts:\",\r\n          contacts,\r\n          \"\\n chats:\",\r\n          chats,\r\n          \"\\n currUser:\",\r\n          user\r\n        );\r\n      }\r\n    );\r\n  }\r\n  public getChatByContact(contactId): Observable<ChatCollection> {\r\n    let chatInfo = this.user.chatInfo.find(chat => chat.contactId === contactId);\r\n\r\n    if (!chatInfo) {\r\n      return this.createChatCollection(contactId)\r\n        .switchMap(chatColl => {\r\n          return this.getChatByContact(contactId)\r\n        });\r\n    }\r\n\r\n    return this.getAllChats()\r\n      .switchMap(chats => {\r\n        let chatCollection = chats.find(chat => chat.id === chatInfo.chatId);\r\n        let contact = this.contacts.find(\r\n          contact => contact.id === contactId\r\n        );\r\n\r\n        this.onChatSelected.next({\r\n          chatCollection: chatCollection,\r\n          contact: contact\r\n        });\r\n\r\n        return of(chatCollection);\r\n      });\r\n  }\r\n\r\n  createChatCollection(contactId) {\r\n\r\n    let contact = this.contacts.find(contact => contact.id === contactId);\r\n    const chatId = (Math.random() * 1000000000).toString();\r\n\r\n    const chatCollection: ChatCollection = {\r\n      id: chatId,\r\n      chats: []\r\n    };\r\n\r\n    let chatInfo = {\r\n      chatId: chatId,\r\n      lastChatTime: new Date(),\r\n      contactId: contact.id,\r\n      contactName: contact.name,\r\n      unread: null\r\n    };\r\n\r\n    return this.http\r\n      .post('api/chat-collections', {...chatCollection})\r\n      .switchMap(updatedChatCollection => {\r\n\r\n        this.user.chatInfo.push(chatInfo);\r\n        return this.updateUser(this.user)\r\n          .pipe(switchMap((res) => {\r\n\r\n            return this.getCurrentUser()\r\n              .pipe(map(user => {\r\n                this.user = user;\r\n                // console.log(user)\r\n                this.onUserUpdated.next(user)\r\n              }))\r\n\r\n            // return updatedChatCollection\r\n          }));\r\n\r\n      });\r\n  }\r\n\r\n  getAllContacts(): Observable<User[]> {\r\n    return this.http.get<User[]>('api/contacts');\r\n  }\r\n  getAllChats(): Observable<ChatCollection[]> {\r\n    return this.http.get<ChatCollection[]>('api/chat-collections');\r\n  }\r\n  getCurrentUser(): Observable<User> {\r\n    return this.http.get<User>('api/chat-user')\r\n      .pipe(map(res => res[0]));\r\n  }\r\n  updateUser(user: User): Observable<User> {\r\n    return this.http.put<User>(`api/chat-user/${user.id}`, {...user})\r\n  }\r\n  updateChats(chatId: string, chats:Chat[]): Observable<ChatCollection> {\r\n    const chatCollection: ChatCollection = {\r\n      id: chatId,\r\n      chats: chats\r\n    }\r\n    return this.http.put<ChatCollection>('api/chat-collections', chatCollection)\r\n  }\r\n\r\n  autoReply(chat) {\r\n    setTimeout(() => {\r\n      this.onChatsUpdated.next(chat)\r\n    }, 1500);\r\n  }\r\n  \r\n}\r\n"],"sourceRoot":""}